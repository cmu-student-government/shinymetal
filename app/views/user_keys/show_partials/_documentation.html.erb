<div class="staff_only panel">
  <h3>Authentication</h3>
  <p> All requests to the API require an API key and the corresponding andrewID of the
      individual who initially requested the API key. The API key is generated pending
      the approval of the Student Activities Administration.  </p>
  <p><%= "Your andrewID is: #{@user_key.user.andrew_id}" %></br>
  <% if @user_key.at_stage?(:confirmed) %>
    <%= "Your API key is: #{@user_key.gen_api_key}" %>
  <% else %>
    Your API key has not yet been approved
  <% end %>
  </p>
  <hr/>

  <h3> Making A Request to The Bridge API </h3>
  <p> All requests to The Bridge API need to be <code>POST</code> requests with two
      header fields: <code>andrew_id</code> and <code>api_key</code>. Paremeters are required, but they are passed in the URL rather than in the body of the request. See below for the syntax for passing paramters. Requests follow the same syntax
      as the <a href="http://support.collegiatelink.net/hc/en-us/articles/204033994-Documentation-for-Web-Services-API-Version-2-0-">CollegiateLink API</a>. You can find more information on the API there.
      Only specific endpoints and combinations of parameters are allowed for specific keys, however, as determined by the Student Activities Office. In order to make a successful API call, you must include all whitelist filters as parameters for the specific endpoint (table) you are trying to access. You
      can check the set of whitelists and filters for your API key by clicking on the above "Permissions" tab. When any one of the specified whitelists (if there is more than one) is included entirely in the request, the request will return the columns specified in "Permitted" under the "Permissions" tab. 
  </p>
  <p> The base URL for making API calls is: <code><%= "#{root_url + 'api/v1/'}" %></code></p>
  <hr/>
  <h3> Constructing the Request URL </h3>
  <p> While all API calls must include your API key and Andrew ID as headers in a POST request, the data returned is entirely dictated by the URL you make the request to. Example requests are included below, but first it might be helpful to read a bit about how to pass parameters in a URL.</p>
  <p>First, start with your base URL: <code><%= "#{root_url + 'api/v1/'}" %></code>. Then, choose a table/endpoint that you have access to as specified under the "Permissions" tab. For example, if you have access to <code>organizations</code>, you would append that to the URL, which now looks like this: <code><%= "#{root_url + 'api/v1/organizations'}" %></code></p>
  <p>Now, you need to all of the filters for one of the whitelists specified for your access to the <code>organizations</code> table/endpoint. An example might be: <code>excludeHiddenOrganizations = true and status = active</code>. We first add a question mark onto the URL to indicate we're adding parameters. Then, we add each of the parmeters, with no spaces, separated by an ampersand, which we must escape by writing it as "&amp;". Now, our URL looks like this: <code><%= "#{root_url + 'api/v1/' + 'organizations?' + 'excludeHiddenOrganizations=true' + '&amp;status=active'}" %></code>.</p>
  <p>Note about escaping characters in HTML: when you are writing in code, you must escape the ampersand as specificed above. If you are using an application to test a request, however, such as <code>https://www.hurl.it/</code>, or typing the request into a URL field, you would simply type an ampersand rather than escaping it.</p>
  <hr/>
  <h3> Optional: Pagination </h3>
  <p> All API calls can also have two pagination parameters, <code>page</code> and <code>pageSize</code>. <code>page</code>
    is a parameter that determines which page of the overall response will be returned. <code>pageSize</code> will determine how many
    records will be returned in one response. In order to get all relevant records, an iterator will need to be constructed in your own
    application code to repeatedly request specific pages. Make sure you include the same page size with each subsequent request so that records are not lost. For example, if page 1 includes 5 records, but page 2 includes 8 records, the first page of the second request (not returned) will also be 8 records, which means that three records will be lost to you. </p>
  <hr />
  <h3> Testing API Credentials </h3>
  <p> For authentication purposes, there is an endpoint named "demo_endpoint" that is useful for simply testing
      whether a set of credentials is correct and your API key is not expired. </p>

  <ul class="tabs" data-tab>
    <li class="tab-title active"><a href="#curlTestRequest">curl</a></li>
    <li class="tab-title"><a href="#rubyTestRequest">Ruby</a></li>
    <li class="tab-title"><a href="#pythonTestRequest">Python</a></li>
    <li class="tab-title"><a href="#phpTestRequest">PHP</a></li>
  </ul>

  <div class="tabs-content">

    <div class="content active" id="curlTestRequest">
      <h3> Sample API Call </h3>
      <pre class="prettyprint"><%= "curl -X POST \\ 
  -H 'andrew_id: #{@user_key.user.andrew_id}' \\
  -H 'api_key: #{@user_key.gen_api_key}' \\
  '#{root_url + "api/v1/"}demo_endpoint'" %></pre>

      <%= render partial: 'user_keys/show_partials/documentation_test_response' %>

    </div>

    <div class="content" id="rubyTestRequest">
      <h3> Sample API Call </h3>
      <pre class="prettyprint"><%= "require 'base64'
require 'openssl'
require 'net/http'
require 'JSON'

uri = URI.parse('#{root_url + "api/v1/"}demo_endpoint')
https = Net::HTTP.new(uri.host, uri.port)
https.use_ssl = true
https.verify_mode = OpenSSL::SSL::VERIFY_NONE
req = Net::HTTP::Post.new(uri)
# set the headers
req['andrew_id'] = '#{@user_key.user.andrew_id}'
req['api_key'] = '#{@user_key.gen_api_key}'
res = https.request(req)
JSON.parse(res.body)"%></pre>

      <%= render partial: 'user_keys/show_partials/documentation_test_response' %>

    </div>

    <div class="content" id="pythonTestRequest">
      <h3> Sample API Call </h3>
      <pre class="prettyprint"><%= "# assumes the requests library has been installed previously with
# sudo pip install requests
import requests

headers = {'andrew_id' : '#{@user_key.user.andrew_id}', 'api_key': '#{@user_key.gen_api_key}'}
r = requests.post('#{root_url + "api/v1/"}demo_endpoint', headers=headers)
print(r.text)
# can also do r.json()
"%></pre>

      <%= render partial: 'user_keys/show_partials/documentation_test_response' %>

    </div>

    <div class="content" id="phpTestRequest">
      <h3> Sample API Call </h3>
      <pre class="prettyprint"><%="$url = '#{root_url + 'api/v1/'}demo_endpoint';
$options = array( 
  'http' => array( 
      'header'  => array('andrew_id: #{@user_key.user.andrew_id}', 
                         'api_key: #{@user_key.gen_api_key}'), 
      'method'  => 'POST'));
$context = stream_context_create($options);
$result = file_get_contents($url, false, $context);
print_r($result);"
%></pre>

      <%= render partial: 'user_keys/show_partials/documentation_test_response' %>

    </div>

  </div>
  <hr/>
  <h3> More Sample API Calls </h3>
  <p> For example, assuming you have access to the <code>Events</code> endpoint, can
      see all <code>public</code> events (as dictated by a whitelist for <code>Events</code> that only includes , and you wish to limit the response to 2 records
      per page: </p>
  <ul class="tabs" data-tab>
    <li class="tab-title active"><a href="#curlRequest">curl</a></li>
    <li class="tab-title"><a href="#rubyRequest">Ruby</a></li>
    <li class="tab-title"><a href="#pythonRequest">Python</a></li>
    <li class="tab-title"><a href="#phpRequest">PHP</a></li>
  </ul>

  <div class="tabs-content">

    <div class="content active" id="curlRequest">
      <h3>Sample API Call: </h3>
      <pre class="prettyprint"><%= "curl -X POST \\
  -H 'andrew_id: #{@user_key.user.andrew_id}' \\
  -H 'api_key: #{@user_key.gen_api_key}' \\
  '#{root_url + "api/v1/"}events?pageSize=2&amp;type=public'" %></pre>

      <%= render partial: 'user_keys/show_partials/documentation_sample_response' %>

    </div>

    <div class="content" id="rubyRequest">
      <h3>Sample API Call: </h3>
      <pre class="prettyprint"><%= "require 'base64'
require 'openssl'
require 'net/http'
require 'JSON'

uri = URI.parse('#{root_url + "api/v1/"}events?pageSize=2&type=public')
https = Net::HTTP.new(uri.host, uri.port)
https.use_ssl = true
https.verify_mode = OpenSSL::SSL::VERIFY_NONE
req = Net::HTTP::Post.new(uri)
# set the headers
req['andrew_id'] = '#{@user_key.user.andrew_id}'
req['api_key'] = '#{@user_key.gen_api_key}'
res = https.request(req)
JSON.parse(res.body)"%></pre>

      <%= render partial: 'user_keys/show_partials/documentation_sample_response' %>

    </div>

    <div class="content" id="pythonRequest">
      <h3>Sample API Call: </h3>
      <pre class="prettyprint"><%= "# assumes the requests library has been installed previously with
# sudo pip install requests
import requests

headers = {'andrew_id' : '#{@user_key.user.andrew_id}', 'api_key': '#{@user_key.gen_api_key}'}
r = requests.post('#{root_url + "api/v1/"}events?pageSize=2&type=public', headers=headers)
print(r.text)
# can also do r.json()
  "%></pre>

      <%= render partial: 'user_keys/show_partials/documentation_sample_response' %>

    </div>

    <div class="content" id="phpRequest">
      <h3> Sample API Call </h3>
      <pre class="prettyprint"><%="$url = '#{root_url + 'api/v1/'}events';
$options = array( 
  'http' => array( 
      'header'  => array('andrew_id: #{@user_key.user.andrew_id}', 
                         'api_key: #{@user_key.gen_api_key}'), 
      'method'  => 'POST', 
      'content' => http_build_query(array('type'     => 'public',
                                          'pageSize' => 2))));
$context = stream_context_create($options);
$result = file_get_contents($url, false, $context);
print_r($result);"
%></pre>

      <%= render partial: 'user_keys/show_partials/documentation_sample_response' %>

    </div>


  </div>

</div>


